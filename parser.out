Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statements
Rule 1     statements -> statement statements
Rule 2     statements -> statement
Rule 3     statement -> assignment_statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> if_statement
Rule 6     statement -> while_statement
Rule 7     statement -> for_in_statement
Rule 8     assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON
Rule 9     assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON
Rule 10    assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON
Rule 11    assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 12    assignment_statement -> IDENTIFIER ASSIGN expression
Rule 13    assignment_statement -> VAR IDENTIFIER ASSIGN expression
Rule 14    assignment_statement -> CONST IDENTIFIER ASSIGN expression
Rule 15    assignment_statement -> LET IDENTIFIER ASSIGN expression
Rule 16    declaration_statement -> VAR IDENTIFIER SEMICOLON
Rule 17    declaration_statement -> LET IDENTIFIER SEMICOLON
Rule 18    expression -> NUMBER
Rule 19    expression -> IDENTIFIER
Rule 20    expression -> expression PLUS expression
Rule 21    expression -> expression MINUS expression
Rule 22    expression -> expression TIMES expression
Rule 23    expression -> expression DIVIDE expression
Rule 24    expression -> LPAREN expression RPAREN
Rule 25    condition -> expression RELATION expression
Rule 26    condition -> LPAREN condition RPAREN
Rule 27    if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY
Rule 28    if_statement -> IF LPAREN condition RPAREN statements
Rule 29    if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
Rule 30    else_statement -> ELSE LCURLY statements RCURLY
Rule 31    else_statement -> ELSE if_statement
Rule 32    while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY
Rule 33    while_statement -> WHILE LPAREN condition RPAREN statements
Rule 34    for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
Rule 35    for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
Rule 36    for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
Rule 37    for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
Rule 38    for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
Rule 39    for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

Terminals, with rules where they appear

ASSIGN               : 8 9 10 11 12 13 14 15
CONST                : 9 14 38 39
DIVIDE               : 23
ELSE                 : 30 31
FOR                  : 34 35 36 37 38 39
IDENTIFIER           : 8 9 10 11 12 13 14 15 16 17 19 34 34 35 35 36 36 37 37 38 38 39 39
IF                   : 27 28 29
IN                   : 34 35 36 37 38 39
LCURLY               : 27 29 30 32 34 36 38
LET                  : 10 15 17 34 35
LPAREN               : 24 26 27 28 29 32 33 34 35 36 37 38 39
MINUS                : 21
NUMBER               : 18
PLUS                 : 20
RCURLY               : 27 29 30 32 34 36 38
RELATION             : 25
RPAREN               : 24 26 27 28 29 32 33 34 35 36 37 38 39
SEMICOLON            : 8 9 10 11 16 17
TIMES                : 22
VAR                  : 8 13 16 36 37
WHILE                : 32 33
error                : 

Nonterminals, with rules where they appear

assignment_statement : 3
condition            : 26 27 28 29 32 33
declaration_statement : 4
else_statement       : 29
expression           : 8 9 10 11 12 13 14 15 20 20 21 21 22 22 23 23 24 25 25
for_in_statement     : 7
if_statement         : 5 31
statement            : 1 2
statements           : 1 27 28 29 30 32 33 34 35 36 37 38 39 0
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 1

    (0) S' -> statements .



state 2

    (1) statements -> statement . statements
    (2) statements -> statement .
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    $end            reduce using rule 2 (statements -> statement .)
    RCURLY          reduce using rule 2 (statements -> statement .)
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

  ! VAR             [ reduce using rule 2 (statements -> statement .) ]
  ! CONST           [ reduce using rule 2 (statements -> statement .) ]
  ! LET             [ reduce using rule 2 (statements -> statement .) ]
  ! IDENTIFIER      [ reduce using rule 2 (statements -> statement .) ]
  ! IF              [ reduce using rule 2 (statements -> statement .) ]
  ! WHILE           [ reduce using rule 2 (statements -> statement .) ]
  ! FOR             [ reduce using rule 2 (statements -> statement .) ]

    statement                      shift and go to state 2
    statements                     shift and go to state 15
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 3

    (3) statement -> assignment_statement .

    VAR             reduce using rule 3 (statement -> assignment_statement .)
    CONST           reduce using rule 3 (statement -> assignment_statement .)
    LET             reduce using rule 3 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 3 (statement -> assignment_statement .)
    IF              reduce using rule 3 (statement -> assignment_statement .)
    WHILE           reduce using rule 3 (statement -> assignment_statement .)
    FOR             reduce using rule 3 (statement -> assignment_statement .)
    $end            reduce using rule 3 (statement -> assignment_statement .)
    RCURLY          reduce using rule 3 (statement -> assignment_statement .)


state 4

    (4) statement -> declaration_statement .

    VAR             reduce using rule 4 (statement -> declaration_statement .)
    CONST           reduce using rule 4 (statement -> declaration_statement .)
    LET             reduce using rule 4 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    WHILE           reduce using rule 4 (statement -> declaration_statement .)
    FOR             reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)
    RCURLY          reduce using rule 4 (statement -> declaration_statement .)


state 5

    (5) statement -> if_statement .

    VAR             reduce using rule 5 (statement -> if_statement .)
    CONST           reduce using rule 5 (statement -> if_statement .)
    LET             reduce using rule 5 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    RCURLY          reduce using rule 5 (statement -> if_statement .)


state 6

    (6) statement -> while_statement .

    VAR             reduce using rule 6 (statement -> while_statement .)
    CONST           reduce using rule 6 (statement -> while_statement .)
    LET             reduce using rule 6 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> while_statement .)
    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    FOR             reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    RCURLY          reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> for_in_statement .

    VAR             reduce using rule 7 (statement -> for_in_statement .)
    CONST           reduce using rule 7 (statement -> for_in_statement .)
    LET             reduce using rule 7 (statement -> for_in_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> for_in_statement .)
    IF              reduce using rule 7 (statement -> for_in_statement .)
    WHILE           reduce using rule 7 (statement -> for_in_statement .)
    FOR             reduce using rule 7 (statement -> for_in_statement .)
    $end            reduce using rule 7 (statement -> for_in_statement .)
    RCURLY          reduce using rule 7 (statement -> for_in_statement .)


state 8

    (8) assignment_statement -> VAR . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment_statement -> VAR . IDENTIFIER ASSIGN expression
    (16) declaration_statement -> VAR . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 16


state 9

    (11) assignment_statement -> IDENTIFIER . ASSIGN expression SEMICOLON
    (12) assignment_statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 17


state 10

    (9) assignment_statement -> CONST . IDENTIFIER ASSIGN expression SEMICOLON
    (14) assignment_statement -> CONST . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 18


state 11

    (10) assignment_statement -> LET . IDENTIFIER ASSIGN expression SEMICOLON
    (15) assignment_statement -> LET . IDENTIFIER ASSIGN expression
    (17) declaration_statement -> LET . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 19


state 12

    (27) if_statement -> IF . LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> IF . LPAREN condition RPAREN statements
    (29) if_statement -> IF . LPAREN condition RPAREN LCURLY statements RCURLY else_statement

    LPAREN          shift and go to state 20


state 13

    (32) while_statement -> WHILE . LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> WHILE . LPAREN condition RPAREN statements

    LPAREN          shift and go to state 21


state 14

    (34) for_in_statement -> FOR . LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> FOR . LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> FOR . LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> FOR . LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> FOR . LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> FOR . LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    LPAREN          shift and go to state 22


state 15

    (1) statements -> statement statements .

    $end            reduce using rule 1 (statements -> statement statements .)
    VAR             reduce using rule 1 (statements -> statement statements .)
    CONST           reduce using rule 1 (statements -> statement statements .)
    LET             reduce using rule 1 (statements -> statement statements .)
    IDENTIFIER      reduce using rule 1 (statements -> statement statements .)
    IF              reduce using rule 1 (statements -> statement statements .)
    WHILE           reduce using rule 1 (statements -> statement statements .)
    FOR             reduce using rule 1 (statements -> statement statements .)
    RCURLY          reduce using rule 1 (statements -> statement statements .)


state 16

    (8) assignment_statement -> VAR IDENTIFIER . ASSIGN expression SEMICOLON
    (13) assignment_statement -> VAR IDENTIFIER . ASSIGN expression
    (16) declaration_statement -> VAR IDENTIFIER . SEMICOLON

    ASSIGN          shift and go to state 23
    SEMICOLON       shift and go to state 24


state 17

    (11) assignment_statement -> IDENTIFIER ASSIGN . expression SEMICOLON
    (12) assignment_statement -> IDENTIFIER ASSIGN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 26

state 18

    (9) assignment_statement -> CONST IDENTIFIER . ASSIGN expression SEMICOLON
    (14) assignment_statement -> CONST IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 29


state 19

    (10) assignment_statement -> LET IDENTIFIER . ASSIGN expression SEMICOLON
    (15) assignment_statement -> LET IDENTIFIER . ASSIGN expression
    (17) declaration_statement -> LET IDENTIFIER . SEMICOLON

    ASSIGN          shift and go to state 30
    SEMICOLON       shift and go to state 31


state 20

    (27) if_statement -> IF LPAREN . condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> IF LPAREN . condition RPAREN statements
    (29) if_statement -> IF LPAREN . condition RPAREN LCURLY statements RCURLY else_statement
    (25) condition -> . expression RELATION expression
    (26) condition -> . LPAREN condition RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 32
    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25

    condition                      shift and go to state 33
    expression                     shift and go to state 34

state 21

    (32) while_statement -> WHILE LPAREN . condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> WHILE LPAREN . condition RPAREN statements
    (25) condition -> . expression RELATION expression
    (26) condition -> . LPAREN condition RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 32
    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25

    condition                      shift and go to state 35
    expression                     shift and go to state 34

state 22

    (34) for_in_statement -> FOR LPAREN . LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> FOR LPAREN . LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> FOR LPAREN . VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> FOR LPAREN . VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> FOR LPAREN . CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> FOR LPAREN . CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    LET             shift and go to state 36
    VAR             shift and go to state 37
    CONST           shift and go to state 38


state 23

    (8) assignment_statement -> VAR IDENTIFIER ASSIGN . expression SEMICOLON
    (13) assignment_statement -> VAR IDENTIFIER ASSIGN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 39

state 24

    (16) declaration_statement -> VAR IDENTIFIER SEMICOLON .

    VAR             reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    LET             reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    IF              reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    $end            reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)
    RCURLY          reduce using rule 16 (declaration_statement -> VAR IDENTIFIER SEMICOLON .)


state 25

    (19) expression -> IDENTIFIER .

    SEMICOLON       reduce using rule 19 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 19 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 19 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 19 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 19 (expression -> IDENTIFIER .)
    VAR             reduce using rule 19 (expression -> IDENTIFIER .)
    CONST           reduce using rule 19 (expression -> IDENTIFIER .)
    LET             reduce using rule 19 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 19 (expression -> IDENTIFIER .)
    IF              reduce using rule 19 (expression -> IDENTIFIER .)
    WHILE           reduce using rule 19 (expression -> IDENTIFIER .)
    FOR             reduce using rule 19 (expression -> IDENTIFIER .)
    $end            reduce using rule 19 (expression -> IDENTIFIER .)
    RCURLY          reduce using rule 19 (expression -> IDENTIFIER .)
    RELATION        reduce using rule 19 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 19 (expression -> IDENTIFIER .)


state 26

    (11) assignment_statement -> IDENTIFIER ASSIGN expression . SEMICOLON
    (12) assignment_statement -> IDENTIFIER ASSIGN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 40
    VAR             reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    LET             reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    WHILE           reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    RCURLY          reduce using rule 12 (assignment_statement -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 27

    (18) expression -> NUMBER .

    SEMICOLON       reduce using rule 18 (expression -> NUMBER .)
    PLUS            reduce using rule 18 (expression -> NUMBER .)
    MINUS           reduce using rule 18 (expression -> NUMBER .)
    TIMES           reduce using rule 18 (expression -> NUMBER .)
    DIVIDE          reduce using rule 18 (expression -> NUMBER .)
    VAR             reduce using rule 18 (expression -> NUMBER .)
    CONST           reduce using rule 18 (expression -> NUMBER .)
    LET             reduce using rule 18 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 18 (expression -> NUMBER .)
    IF              reduce using rule 18 (expression -> NUMBER .)
    WHILE           reduce using rule 18 (expression -> NUMBER .)
    FOR             reduce using rule 18 (expression -> NUMBER .)
    $end            reduce using rule 18 (expression -> NUMBER .)
    RCURLY          reduce using rule 18 (expression -> NUMBER .)
    RELATION        reduce using rule 18 (expression -> NUMBER .)
    RPAREN          reduce using rule 18 (expression -> NUMBER .)


state 28

    (24) expression -> LPAREN . expression RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 45

state 29

    (9) assignment_statement -> CONST IDENTIFIER ASSIGN . expression SEMICOLON
    (14) assignment_statement -> CONST IDENTIFIER ASSIGN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 46

state 30

    (10) assignment_statement -> LET IDENTIFIER ASSIGN . expression SEMICOLON
    (15) assignment_statement -> LET IDENTIFIER ASSIGN . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 47

state 31

    (17) declaration_statement -> LET IDENTIFIER SEMICOLON .

    VAR             reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    LET             reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    IF              reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    $end            reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)
    RCURLY          reduce using rule 17 (declaration_statement -> LET IDENTIFIER SEMICOLON .)


state 32

    (26) condition -> LPAREN . condition RPAREN
    (24) expression -> LPAREN . expression RPAREN
    (25) condition -> . expression RELATION expression
    (26) condition -> . LPAREN condition RPAREN
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 32
    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25

    condition                      shift and go to state 48
    expression                     shift and go to state 49

state 33

    (27) if_statement -> IF LPAREN condition . RPAREN LCURLY statements RCURLY
    (28) if_statement -> IF LPAREN condition . RPAREN statements
    (29) if_statement -> IF LPAREN condition . RPAREN LCURLY statements RCURLY else_statement

    RPAREN          shift and go to state 50


state 34

    (25) condition -> expression . RELATION expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    RELATION        shift and go to state 51
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 35

    (32) while_statement -> WHILE LPAREN condition . RPAREN LCURLY statements RCURLY
    (33) while_statement -> WHILE LPAREN condition . RPAREN statements

    RPAREN          shift and go to state 52


state 36

    (34) for_in_statement -> FOR LPAREN LET . IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> FOR LPAREN LET . IDENTIFIER IN IDENTIFIER RPAREN statements

    IDENTIFIER      shift and go to state 53


state 37

    (36) for_in_statement -> FOR LPAREN VAR . IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> FOR LPAREN VAR . IDENTIFIER IN IDENTIFIER RPAREN statements

    IDENTIFIER      shift and go to state 54


state 38

    (38) for_in_statement -> FOR LPAREN CONST . IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> FOR LPAREN CONST . IDENTIFIER IN IDENTIFIER RPAREN statements

    IDENTIFIER      shift and go to state 55


state 39

    (8) assignment_statement -> VAR IDENTIFIER ASSIGN expression . SEMICOLON
    (13) assignment_statement -> VAR IDENTIFIER ASSIGN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 56
    VAR             reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    LET             reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    WHILE           reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    RCURLY          reduce using rule 13 (assignment_statement -> VAR IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 40

    (11) assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .

    VAR             reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LET             reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RCURLY          reduce using rule 11 (assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 41

    (20) expression -> expression PLUS . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 57

state 42

    (21) expression -> expression MINUS . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 58

state 43

    (22) expression -> expression TIMES . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 59

state 44

    (23) expression -> expression DIVIDE . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 60

state 45

    (24) expression -> LPAREN expression . RPAREN
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 46

    (9) assignment_statement -> CONST IDENTIFIER ASSIGN expression . SEMICOLON
    (14) assignment_statement -> CONST IDENTIFIER ASSIGN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 62
    VAR             reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    LET             reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    WHILE           reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    RCURLY          reduce using rule 14 (assignment_statement -> CONST IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 47

    (10) assignment_statement -> LET IDENTIFIER ASSIGN expression . SEMICOLON
    (15) assignment_statement -> LET IDENTIFIER ASSIGN expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 63
    VAR             reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    LET             reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    WHILE           reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    RCURLY          reduce using rule 15 (assignment_statement -> LET IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 48

    (26) condition -> LPAREN condition . RPAREN

    RPAREN          shift and go to state 64


state 49

    (24) expression -> LPAREN expression . RPAREN
    (25) condition -> expression . RELATION expression
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 61
    RELATION        shift and go to state 51
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 50

    (27) if_statement -> IF LPAREN condition RPAREN . LCURLY statements RCURLY
    (28) if_statement -> IF LPAREN condition RPAREN . statements
    (29) if_statement -> IF LPAREN condition RPAREN . LCURLY statements RCURLY else_statement
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    LCURLY          shift and go to state 65
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 66
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 51

    (25) condition -> expression RELATION . expression
    (18) expression -> . NUMBER
    (19) expression -> . IDENTIFIER
    (20) expression -> . expression PLUS expression
    (21) expression -> . expression MINUS expression
    (22) expression -> . expression TIMES expression
    (23) expression -> . expression DIVIDE expression
    (24) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 27
    IDENTIFIER      shift and go to state 25
    LPAREN          shift and go to state 28

    expression                     shift and go to state 67

state 52

    (32) while_statement -> WHILE LPAREN condition RPAREN . LCURLY statements RCURLY
    (33) while_statement -> WHILE LPAREN condition RPAREN . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    LCURLY          shift and go to state 68
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 69
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 53

    (34) for_in_statement -> FOR LPAREN LET IDENTIFIER . IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> FOR LPAREN LET IDENTIFIER . IN IDENTIFIER RPAREN statements

    IN              shift and go to state 70


state 54

    (36) for_in_statement -> FOR LPAREN VAR IDENTIFIER . IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> FOR LPAREN VAR IDENTIFIER . IN IDENTIFIER RPAREN statements

    IN              shift and go to state 71


state 55

    (38) for_in_statement -> FOR LPAREN CONST IDENTIFIER . IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> FOR LPAREN CONST IDENTIFIER . IN IDENTIFIER RPAREN statements

    IN              shift and go to state 72


state 56

    (8) assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .

    VAR             reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    LET             reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    RCURLY          reduce using rule 8 (assignment_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)


state 57

    (20) expression -> expression PLUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 20 (expression -> expression PLUS expression .)
    VAR             reduce using rule 20 (expression -> expression PLUS expression .)
    CONST           reduce using rule 20 (expression -> expression PLUS expression .)
    LET             reduce using rule 20 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 20 (expression -> expression PLUS expression .)
    IF              reduce using rule 20 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 20 (expression -> expression PLUS expression .)
    FOR             reduce using rule 20 (expression -> expression PLUS expression .)
    $end            reduce using rule 20 (expression -> expression PLUS expression .)
    RCURLY          reduce using rule 20 (expression -> expression PLUS expression .)
    RELATION        reduce using rule 20 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 20 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 20 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 20 (expression -> expression PLUS expression .) ]


state 58

    (21) expression -> expression MINUS expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 21 (expression -> expression MINUS expression .)
    VAR             reduce using rule 21 (expression -> expression MINUS expression .)
    CONST           reduce using rule 21 (expression -> expression MINUS expression .)
    LET             reduce using rule 21 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 21 (expression -> expression MINUS expression .)
    IF              reduce using rule 21 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 21 (expression -> expression MINUS expression .)
    FOR             reduce using rule 21 (expression -> expression MINUS expression .)
    $end            reduce using rule 21 (expression -> expression MINUS expression .)
    RCURLY          reduce using rule 21 (expression -> expression MINUS expression .)
    RELATION        reduce using rule 21 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 21 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 21 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression MINUS expression .) ]


state 59

    (22) expression -> expression TIMES expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 22 (expression -> expression TIMES expression .)
    VAR             reduce using rule 22 (expression -> expression TIMES expression .)
    CONST           reduce using rule 22 (expression -> expression TIMES expression .)
    LET             reduce using rule 22 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 22 (expression -> expression TIMES expression .)
    IF              reduce using rule 22 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 22 (expression -> expression TIMES expression .)
    FOR             reduce using rule 22 (expression -> expression TIMES expression .)
    $end            reduce using rule 22 (expression -> expression TIMES expression .)
    RCURLY          reduce using rule 22 (expression -> expression TIMES expression .)
    RELATION        reduce using rule 22 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 22 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 22 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 22 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 22 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression TIMES expression .) ]


state 60

    (23) expression -> expression DIVIDE expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    SEMICOLON       reduce using rule 23 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 23 (expression -> expression DIVIDE expression .)
    CONST           reduce using rule 23 (expression -> expression DIVIDE expression .)
    LET             reduce using rule 23 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 23 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 23 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 23 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 23 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 23 (expression -> expression DIVIDE expression .)
    RCURLY          reduce using rule 23 (expression -> expression DIVIDE expression .)
    RELATION        reduce using rule 23 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 23 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 23 (expression -> expression DIVIDE expression .) ]


state 61

    (24) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    RCURLY          reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    RELATION        reduce using rule 24 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 24 (expression -> LPAREN expression RPAREN .)


state 62

    (9) assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .

    VAR             reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    LET             reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    RCURLY          reduce using rule 9 (assignment_statement -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)


state 63

    (10) assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .

    VAR             reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    LET             reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)
    RCURLY          reduce using rule 10 (assignment_statement -> LET IDENTIFIER ASSIGN expression SEMICOLON .)


state 64

    (26) condition -> LPAREN condition RPAREN .

    RPAREN          reduce using rule 26 (condition -> LPAREN condition RPAREN .)


state 65

    (27) if_statement -> IF LPAREN condition RPAREN LCURLY . statements RCURLY
    (29) if_statement -> IF LPAREN condition RPAREN LCURLY . statements RCURLY else_statement
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 73
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 66

    (28) if_statement -> IF LPAREN condition RPAREN statements .

    VAR             reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    CONST           reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    LET             reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    IDENTIFIER      reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    IF              reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    WHILE           reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    FOR             reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    $end            reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)
    RCURLY          reduce using rule 28 (if_statement -> IF LPAREN condition RPAREN statements .)


state 67

    (25) condition -> expression RELATION expression .
    (20) expression -> expression . PLUS expression
    (21) expression -> expression . MINUS expression
    (22) expression -> expression . TIMES expression
    (23) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 25 (condition -> expression RELATION expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 68

    (32) while_statement -> WHILE LPAREN condition RPAREN LCURLY . statements RCURLY
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 74
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 69

    (33) while_statement -> WHILE LPAREN condition RPAREN statements .

    VAR             reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    CONST           reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    LET             reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    IDENTIFIER      reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    IF              reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    WHILE           reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    FOR             reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    $end            reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)
    RCURLY          reduce using rule 33 (while_statement -> WHILE LPAREN condition RPAREN statements .)


state 70

    (34) for_in_statement -> FOR LPAREN LET IDENTIFIER IN . IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> FOR LPAREN LET IDENTIFIER IN . IDENTIFIER RPAREN statements

    IDENTIFIER      shift and go to state 75


state 71

    (36) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN . IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN . IDENTIFIER RPAREN statements

    IDENTIFIER      shift and go to state 76


state 72

    (38) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN . IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN . IDENTIFIER RPAREN statements

    IDENTIFIER      shift and go to state 77


state 73

    (27) if_statement -> IF LPAREN condition RPAREN LCURLY statements . RCURLY
    (29) if_statement -> IF LPAREN condition RPAREN LCURLY statements . RCURLY else_statement

    RCURLY          shift and go to state 78


state 74

    (32) while_statement -> WHILE LPAREN condition RPAREN LCURLY statements . RCURLY

    RCURLY          shift and go to state 79


state 75

    (34) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER . RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER . RPAREN statements

    RPAREN          shift and go to state 80


state 76

    (36) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER . RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER . RPAREN statements

    RPAREN          shift and go to state 81


state 77

    (38) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER . RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER . RPAREN statements

    RPAREN          shift and go to state 82


state 78

    (27) if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .
    (29) if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY . else_statement
    (30) else_statement -> . ELSE LCURLY statements RCURLY
    (31) else_statement -> . ELSE if_statement

    VAR             reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    CONST           reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    LET             reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    IF              reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    WHILE           reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    FOR             reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    $end            reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    RCURLY          reduce using rule 27 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY .)
    ELSE            shift and go to state 84

    else_statement                 shift and go to state 83

state 79

    (32) while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .

    VAR             reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    CONST           reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    LET             reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    IF              reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    WHILE           reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    FOR             reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    $end            reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)
    RCURLY          reduce using rule 32 (while_statement -> WHILE LPAREN condition RPAREN LCURLY statements RCURLY .)


state 80

    (34) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN . LCURLY statements RCURLY
    (35) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    LCURLY          shift and go to state 85
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 86
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 81

    (36) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN . LCURLY statements RCURLY
    (37) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    LCURLY          shift and go to state 87
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 88
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 82

    (38) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN . LCURLY statements RCURLY
    (39) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN . statements
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    LCURLY          shift and go to state 89
    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 90
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 83

    (29) if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .

    VAR             reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    CONST           reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    LET             reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    IDENTIFIER      reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    IF              reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    WHILE           reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    FOR             reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    $end            reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)
    RCURLY          reduce using rule 29 (if_statement -> IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement .)


state 84

    (30) else_statement -> ELSE . LCURLY statements RCURLY
    (31) else_statement -> ELSE . if_statement
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement

    LCURLY          shift and go to state 91
    IF              shift and go to state 12

    if_statement                   shift and go to state 92

state 85

    (34) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY . statements RCURLY
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 93
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 86

    (35) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .

    VAR             reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    CONST           reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    LET             reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    IDENTIFIER      reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    IF              reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    WHILE           reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    FOR             reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    $end            reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)
    RCURLY          reduce using rule 35 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements .)


state 87

    (36) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY . statements RCURLY
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 94
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 88

    (37) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .

    VAR             reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    CONST           reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    LET             reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    IDENTIFIER      reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    IF              reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    WHILE           reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    FOR             reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    $end            reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)
    RCURLY          reduce using rule 37 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements .)


state 89

    (38) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY . statements RCURLY
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 95
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 90

    (39) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .

    VAR             reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    CONST           reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    LET             reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    IDENTIFIER      reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    IF              reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    WHILE           reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    FOR             reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    $end            reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)
    RCURLY          reduce using rule 39 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements .)


state 91

    (30) else_statement -> ELSE LCURLY . statements RCURLY
    (1) statements -> . statement statements
    (2) statements -> . statement
    (3) statement -> . assignment_statement
    (4) statement -> . declaration_statement
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_in_statement
    (8) assignment_statement -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (9) assignment_statement -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (10) assignment_statement -> . LET IDENTIFIER ASSIGN expression SEMICOLON
    (11) assignment_statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (12) assignment_statement -> . IDENTIFIER ASSIGN expression
    (13) assignment_statement -> . VAR IDENTIFIER ASSIGN expression
    (14) assignment_statement -> . CONST IDENTIFIER ASSIGN expression
    (15) assignment_statement -> . LET IDENTIFIER ASSIGN expression
    (16) declaration_statement -> . VAR IDENTIFIER SEMICOLON
    (17) declaration_statement -> . LET IDENTIFIER SEMICOLON
    (27) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY
    (28) if_statement -> . IF LPAREN condition RPAREN statements
    (29) if_statement -> . IF LPAREN condition RPAREN LCURLY statements RCURLY else_statement
    (32) while_statement -> . WHILE LPAREN condition RPAREN LCURLY statements RCURLY
    (33) while_statement -> . WHILE LPAREN condition RPAREN statements
    (34) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (35) for_in_statement -> . FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN statements
    (36) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (37) for_in_statement -> . FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN statements
    (38) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY
    (39) for_in_statement -> . FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN statements

    VAR             shift and go to state 8
    CONST           shift and go to state 10
    LET             shift and go to state 11
    IDENTIFIER      shift and go to state 9
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    FOR             shift and go to state 14

    statements                     shift and go to state 96
    statement                      shift and go to state 2
    assignment_statement           shift and go to state 3
    declaration_statement          shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_in_statement               shift and go to state 7

state 92

    (31) else_statement -> ELSE if_statement .

    $end            reduce using rule 31 (else_statement -> ELSE if_statement .)
    VAR             reduce using rule 31 (else_statement -> ELSE if_statement .)
    CONST           reduce using rule 31 (else_statement -> ELSE if_statement .)
    LET             reduce using rule 31 (else_statement -> ELSE if_statement .)
    IDENTIFIER      reduce using rule 31 (else_statement -> ELSE if_statement .)
    IF              reduce using rule 31 (else_statement -> ELSE if_statement .)
    WHILE           reduce using rule 31 (else_statement -> ELSE if_statement .)
    FOR             reduce using rule 31 (else_statement -> ELSE if_statement .)
    RCURLY          reduce using rule 31 (else_statement -> ELSE if_statement .)


state 93

    (34) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements . RCURLY

    RCURLY          shift and go to state 97


state 94

    (36) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements . RCURLY

    RCURLY          shift and go to state 98


state 95

    (38) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements . RCURLY

    RCURLY          shift and go to state 99


state 96

    (30) else_statement -> ELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 100


state 97

    (34) for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .

    VAR             reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    CONST           reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    LET             reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    IF              reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    WHILE           reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    FOR             reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    $end            reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    RCURLY          reduce using rule 34 (for_in_statement -> FOR LPAREN LET IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)


state 98

    (36) for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .

    VAR             reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    CONST           reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    LET             reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    IF              reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    WHILE           reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    FOR             reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    $end            reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    RCURLY          reduce using rule 36 (for_in_statement -> FOR LPAREN VAR IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)


state 99

    (38) for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .

    VAR             reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    CONST           reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    LET             reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    IF              reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    WHILE           reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    FOR             reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    $end            reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)
    RCURLY          reduce using rule 38 (for_in_statement -> FOR LPAREN CONST IDENTIFIER IN IDENTIFIER RPAREN LCURLY statements RCURLY .)


state 100

    (30) else_statement -> ELSE LCURLY statements RCURLY .

    $end            reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    VAR             reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    CONST           reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    LET             reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    IDENTIFIER      reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    IF              reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    WHILE           reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 30 (else_statement -> ELSE LCURLY statements RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 2 resolved as shift
WARNING: shift/reduce conflict for CONST in state 2 resolved as shift
WARNING: shift/reduce conflict for LET in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
